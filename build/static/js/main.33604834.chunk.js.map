{"version":3,"sources":["components/header.js","utils/toasts.js","components/search.js","components/address.js","utils/address-util.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","history","useHistory","handleLinkClick","e","link","currentTarget","dataset","console","log","push","style","color","Colors","LIGHT_GRAY5","background","BLACK","Group","align","Alignment","LEFT","Heading","Divider","className","onClick","data-link","minimal","icon","text","AppToaster","Toaster","create","position","Position","TOP","Search","setAddress","useState","input","setInput","handleSearch","a","axios","res","data","results","message","show","intent","Intent","DANGER","classes","value","onChange","target","large","fill","placeholder","Address","address","Fragment","formatted_address","getFormattedAddress","split","map","x","trim","join","Weather","weatherData","details","curr","currently","timezone","iconUrl","summary","temperature","pressure","windSpeed","visibility","cloudCover","ozone","humidity","currentGeoIcon","interactive","elevation","Elevation","FOUR","COBALT1","GRAY5","city","region","zip","src","width","height","marginTop","data-placement","data-toggle","title","App","currenGeoLocation","setCurrenGeoLocation","weather","setWeather","geolocation","setGeoLocation","useEffect","resa","lat","lon","resb","get","getGeolocationFromAddress","lng","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.33604834.chunk.js","sourcesContent":["import React from 'react';\nimport {Alignment, Button, Navbar, Colors} from \"@blueprintjs/core\";\nimport {useHistory} from 'react-router-dom';\n\nconst Header = () => {\n    const history = useHistory();\n    const handleLinkClick = e => {\n        const {link} = e.currentTarget.dataset;\n        console.log(link);\n        history.push(link);\n    };\n    return (\n        <Navbar style={{color: Colors.LIGHT_GRAY5, background: Colors.BLACK}}>\n            <Navbar.Group align={Alignment.LEFT}>\n                <Navbar.Heading>Weather Scanner</Navbar.Heading>\n                <Navbar.Divider/>\n                <Button\n                    className='bp3-large bp3-intent-warning'\n                    onClick={handleLinkClick}\n                    data-link={'/'} minimal={true} icon={'home'} text={'Home'}/>\n                <Button\n                    className='bp3-large bp3-intent-warning'\n                    onClick={handleLinkClick}\n                    data-link={'/search'} minimal={true} icon={'search'} text={'Search'}/>\n            </Navbar.Group>\n        </Navbar>\n    );\n};\n\nexport default Header;","import {Intent, Position, Toaster} from \"@blueprintjs/core\";\n\n/** Singleton toaster instance. Create separate instances for different options. */\nexport const AppToaster = Toaster.create({\n    className: \"app-toaster\",\n    position: Position.TOP,\n});\n\nexport const showSuccessToast = message => AppToaster.show({\n    message,\n    intent: Intent.SUCCESS\n});\n\nexport const showErrorToast = message => AppToaster.show({\n    message,\n    intent: Intent.DANGER\n});\n\nexport const showLongErrorToast = message => AppToaster.show({\n    message,\n    intent: Intent.DANGER,\n    timeout: 60000\n});\n\nexport const showWarningToast = message => AppToaster.show({\n    message,\n    intent: Intent.WARNING\n});","import React, {useState} from 'react';\nimport axios from 'axios';\nimport {Button, ControlGroup, InputGroup, Colors} from \"@blueprintjs/core\";\nimport * as classes from './search.module.scss';\nimport {showErrorToast, showSuccessToast} from \"../utils/toasts\";\n\nconst Search = ({setAddress}) => {\n    const [input, setInput] = useState('2130 Wightman Street');\n\n    const handleSearch = async () => {\n        try {\n            const res = await axios(`/weather/places/?address=${input}`);\n            const data = res.data;\n            setAddress(data.results[0]);\n        } catch (ex) {\n            showErrorToast('Could not fetch the address data.');\n        }\n    };\n    return (\n        <div>\n            <div className={classes.searchbox}>\n                <ControlGroup>\n                    <InputGroup value={input} onChange={e => setInput(e.target.value)} large={true} fill={true} placeholder={'123 X Way'} />\n                    <Button\n                        className='bp3-large bp3-intent-primary'\n                        onClick={handleSearch}\n                        text={'Search'} />\n                </ControlGroup>\n            </div>\n        </div>\n    );\n};\n\nexport default Search;","import React from 'react';\nimport {getFormattedAddress} from \"../utils/address-util\";\n\nconst Address = ({address}) => {\n    return (\n        <React.Fragment>\n            <span>{address && getFormattedAddress(address).split(',').map(x => x.trim()).join('\\n')}</span>\n        </React.Fragment>\n\n    );\n};\n\nexport default Address;","import React from 'react';\nimport get from 'lodash.get';\n\nexport const getFormattedAddress = address => address.formatted_address;\n\nexport const getFormattedLongAddress = address => address.address_components.map(c => {\n    const type = c.types[0];\n    const formattedType = type.replace(/_/g, ' ');\n    return <div>{formattedType}: {c.long_name}</div>\n});\n\nexport const getGeolocationFromAddress = address => get(address, 'geometry.location');","import React from 'react';\nimport { Card, Elevation, Colors } from \"@blueprintjs/core\";\nimport Address from './address';\n\nconst Weather = ({weatherData, address, details}) => {\n    const curr = weatherData && weatherData.currently;\n    const timezone = weatherData && weatherData.timezone;\n    const icon = weatherData && curr.icon;\n    const iconUrl = 'https://darksky.net/images/weather-icons';\n\n    const summary = details.currently && details.currently.summary;\n    const temperature = details.currently && details.currently.temperature;\n    const pressure = details.currently && details.currently.pressure;\n    const windSpeed = details.currently && details.currently.windSpeed;\n    const visibility = details.currently && details.currently.visibility;\n    const cloudCover = details.currently && details.currently.cloudCover;\n    const ozone = details.currently && details.currently.ozone;\n    const humidity = details.currently && details.currently.humidity;\n    const currentGeoIcon = details.currently && details.currently.icon;\n\n    return (\n        <div>\n            <br/>\n\n            <Card interactive={true} elevation={Elevation.FOUR} style={{color: Colors.COBALT1, background: Colors.GRAY5}} >\n                <div className='grid-info-container'>\n                    <div className='grid-info-item'>\n                        <p><b>Address:</b></p>\n                    </div>\n\n                    <div className='grid-info-item'>\n                        { details && !address\n                            ? (<code>\n                                {   `${details.city}\n                                    ${details.region} ${details.zip}` }\n                                </code>)\n                            : <Address address={address} />\n                        }\n                    </div>\n\n                    <div className=\"grid-info-img-item\">\n                        <img className='iconSeal' src={ details && !address ? `${iconUrl}/${currentGeoIcon}.png` : `${iconUrl}/${icon}.png`} />\n                    </div>\n\n                    <div className='grid-info-item'>\n                        <p><b>Timezone:</b></p>\n                    </div>\n\n                    <div className='grid-info-item'>\n                        <p className=\"details\">\n                            { details && !address ? details.timezone : timezone}</p>\n                    </div>\n\n                    <div className='grid-info-item'>\n                        <p><b>Temperature:</b></p>\n                    </div>\n\n                    <div className='grid-info-item'>\n                        <p className=\"details\">\n                            { details && !address ? temperature : weatherData && curr.temperature}\n                            <img\n                                src=\"https://cdn3.iconfinder.com/data/icons/virtual-notebook/16/button_shape_oval-512.png\"\n                                width=\"7\" height='7' style={{marginTop: '-3%'}} />\n                            F\n                        </p>\n                    </div>\n\n                    <div className='grid-info-item'>\n                        <p><b>Summary:</b></p>\n                    </div>\n\n                    <div className='grid-info-item'>\n                        <p className=\"details\">\n                            { details && !address ? summary : weatherData && curr.summary}</p>\n                    </div>\n                </div>\n\n                <br />\n\n                <div className='grid-detail-container'>\n                    <div className='grid-detail-item'>\n                        <img\n                            src=\"https://cdn2.iconfinder.com/data/icons/weather-74/24/weather-16-512.png\"\n                            width=\"30\" height=\"30\" data-placement=\"top\" data-placement=\"top\"\n                            title=\"Humidity\"/>\n                    </div>\n                    <div className='grid-detail-item'>\n                        <img\n                            src=\"https://cdn2.iconfinder.com/data/icons/weather-74/24/weather-25-512.png\"\n                            width=\"30\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"top\"\n                            title=\"Pressure\"/>\n                    </div>\n                    <div className='grid-detail-item'>\n                        <img\n                            src=\"https://cdn2.iconfinder.com/data/icons/weather-74/24/weather-27-512.png\"\n                            width=\"30\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"top\"\n                            title=\"WindSpeed\"/>\n                    </div>\n                    <div className='grid-detail-item'>\n                        <img\n                            src=\"https://cdn2.iconfinder.com/data/icons/weather-74/24/weather-30-512.png\"\n                            width=\"30\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"top\"\n                            title=\"Visibility\"/>\n                    </div>\n                    <div className='grid-detail-item'>\n                        <img\n                            src=\"https://cdn2.iconfinder.com/data/icons/weather-74/24/weather-28-512.png\"\n                            width=\"30\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"top\"\n                            title=\"cloudCover\"/>\n                    </div>\n                    <div className='grid-detail-item'>\n                        <img\n                            src=\"https://cdn2.iconfinder.com/data/icons/weather-74/24/weather-24-512.png\"\n                            width=\"30\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"top\"\n                            title=\"Ozone\"/>\n                    </div>\n\n                    <div className='grid-detail-item'>\n                        { details && !address ? humidity : weatherData && curr.humidity}\n                    </div>\n\n                    <div className='grid-detail-item'>\n                        { details && !address ? pressure : weatherData && curr.pressure}\n                    </div>\n                    <div className='grid-detail-item'>\n                        { details && !address ? windSpeed : weatherData && curr.windSpeed}\n                    </div>\n                    <div className='grid-detail-item'>\n                        { details && !address ? visibility : weatherData && curr.visibility}\n                    </div>\n                    <div className='grid-detail-item'>\n                        { details && !address ? cloudCover : weatherData && curr.cloudCover}\n                    </div>\n                    <div className='grid-detail-item'>\n                        { details && !address ? ozone : weatherData && curr.ozone}\n                    </div>\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default Weather;","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport Header from \"./components/header\";\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Search from \"./components/search\";\nimport Address from \"./components/address\";\nimport Weather from \"./components/weather\";\n\nimport './App.scss';\nimport {getGeolocationFromAddress} from \"./utils/address-util\";\n\nfunction App() {\n\n    const [address, setAddress] = useState(null);\n    const [currenGeoLocation, setCurrenGeoLocation] = useState({});\n    const [weather, setWeather] = useState(null);\n    const [geolocation, setGeoLocation] = useState(null);\n\n    // todo get geolocation\n    useEffect(() => {\n        // get and set the current geo location\n        (async () => {\n            const resa = await axios('/weather/current-geo');\n            const {lat, lon} = resa.data;\n            const resb = await axios(`/weather/dark-sky?lat=${lat}&lng=${lon}`);\n            const details = {\n                ...resa.data,\n                ...resb.data\n            };\n\n            setCurrenGeoLocation(details);\n        })();\n    }, []);\n\n    // Set the geolocation every time the address changes\n    useEffect(() => setGeoLocation(getGeolocationFromAddress(address)), [address]);\n\n    // Get the weather data every time the geolocation changes\n    useEffect(() => {\n        (async () => {\n            if (geolocation && geolocation.lat) {\n                const {lat, lng} = geolocation;\n                const res = await axios(`/weather/dark-sky?lat=${lat}&lng=${lng}`);\n                setWeather(res.data);\n            }\n        })();\n    }, [geolocation]);\n\n    return (\n        <Router>\n            <Header/>\n            <div className={'app-container'}>\n                <Switch>\n                    <Route path={'/search'}>\n                        <Search setAddress={setAddress}/>\n                        {/*<Address address={address}/>*/}\n                        <Weather details={currenGeoLocation}\n                                 address={address}\n                                 weatherData={weather}\n                        />\n                    </Route>\n                    <Route path={'/'}>\n                        <Weather details={currenGeoLocation}\n                                 address={address}\n                                 weatherData={weather} />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}